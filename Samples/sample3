import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.pantgwyn.objectsort.ObjectSort;

/**
 * perform input callback => output file sort
 *
 */
public class Sample3
{
	private static final Logger	LOG						= Logger.getLogger(SortTest.class.getName());

	private static final String	TEMP_DIR	= "/tmp/objSort/";
	private static final String	SORT_OUT	= TEMP_DIR + "sortOut";

	public static void main(String[] args) throws IOException,
																																								ClassNotFoundException
	{

		int recordCount = 100000; // test objects to create
		
		long									timeStart;
		long									timeElapse;
		
		if (!tempExists())
		{
			LOG.warning("unable to access:" + TEMP_DIR);
			return;
		}

		SomeClassComparator			comp							= new SomeClassComparator();
		SomeClassSortIn							inCallback	= new SomeClassSortIn(recordCount);
		ObjectSort<SomeClass>	sort							= new ObjectSort<SomeClass>();

		timeStart			= new Date().getTime();
		if (sort.sort(inCallback, SORT_OUT, comp, TEMP_DIR + "sortWork"))
		{
			timeElapse		= new Date().getTime() - timeStart;
			LOG.info("sort reported - worked - elapsed time:" + timeElapse + "ms");
			
			if (validateSorted(comp,recordCount))
				LOG.info("output file validated");
			else
				LOG.warning("output file not in order!");
		}

		else
			LOG.warning("sort reported - failed");

	}

	private static boolean validateSorted(SomeClassComparator comp,int expectedCount) throws IOException,
	ClassNotFoundException
{
boolean valid = true ;
SomeClass									previousObj							= null;
SomeClass									currentObj								= null;
Object												obj;

FileInputStream			fileInputStream			= new FileInputStream(SORT_OUT);
ObjectInputStream	objectInputStream	= new ObjectInputStream(fileInputStream);

int count = 0 ;

try
{
obj									= objectInputStream.readUnshared();
count++ ;
previousObj	= (SomeClass) obj;
obj									= objectInputStream.readUnshared();

while (obj != null)
{
count++ ;
currentObj = (SomeClass) obj;

int result = comp.compare(previousObj, currentObj);
if (result > 0)
{
LOG.log(Level.SEVERE, "out of order!");
LOG.log(Level.SEVERE, "previous record:" + previousObj.toString());
LOG.log(Level.SEVERE, "current record:" + currentObj.toString());		
valid = false ;
}

obj									= objectInputStream.readUnshared();
previousObj	= currentObj;

}

} catch (IOException e)
{
obj = null; // assume endOfFile
}

ObjectSort.close(objectInputStream, fileInputStream);

if (count != expectedCount) valid=false;

return valid ;
}

	private static boolean tempExists()
	{
		File dir = new File(TEMP_DIR);

		// if the directory does not exist, create it
		if (!dir.exists())
		{
			try
			{
				dir.mkdir();
			} catch (SecurityException se)
			{
				return false;
			}

		}
		return true;
	}
}
